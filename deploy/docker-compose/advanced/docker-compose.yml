version: '3.5'

services:
  db:
    image: percona:8.0
    networks: [ internal ]
    environment:
      MYSQL_DATABASE:      corteza
      MYSQL_USER:          corteza
      MYSQL_PASSWORD:      change-me
      MYSQL_ROOT_PASSWORD: change-me-too
    #    volumes: [ ./data/db:/var/lib/mysql ] # use local fs
    #    volumes: [ db:/var/lib/mysql ]        # use internal docker volume
    restart: on-failure

  server-system:
    image: cortezaproject/corteza-server-system:${VERSION}
    env_file: [ .env ]
    depends_on: [ db ]
    networks: [ proxy, internal ]
    environment:
      VIRTUAL_HOST:     system.api.${DOMAIN}
      LETSENCRYPT_HOST: system.api.${DOMAIN}
    #    volumes: [ ./data/server-system:/crust/var/store ] # use local fs
    #    volumes: [ server:/crust/var/store ]               # use internal docker volume
    restart: on-failure


  server-messaging:
    image: cortezaproject/corteza-server-messaging:${VERSION}
    env_file: [ .env ]
    depends_on: [ db ]
    networks: [ proxy, internal ]
    environment:
      VIRTUAL_HOST:     messaging.api.${DOMAIN}
      LETSENCRYPT_HOST: messaging.api.${DOMAIN}
    #    volumes: [ ./data/server-messaging:/crust/var/store ] # use local fs
    #    volumes: [ server:/crust/var/store ]                  # use internal docker volume
    restart: on-failure

  server-compose:
    image: cortezaproject/corteza-server-compose:${VERSION}
    env_file: [ .env ]
    depends_on: [ db ]
    networks: [ proxy, internal ]
    environment:
      VIRTUAL_HOST:     compose.api.${DOMAIN}
      LETSENCRYPT_HOST: compose.api.${DOMAIN}
    #    volumes: [ ./data/server-compose:/crust/var/store ] # use local fs
    #    volumes: [ server:/crust/var/store ]                # use internal docker volume
    restart: on-failure

  webapp:
    image: cortezaproject/corteza-webapp:${VERSION}
    networks: [ proxy ]
    environment:
      VIRTUAL_HOST:     ${DOMAIN}
      LETSENCRYPT_HOST: ${DOMAIN}
    restart: on-failure

networks: { internal: {}, proxy: { name: proxy } }

#volumes: { db: {}, server: {} }
